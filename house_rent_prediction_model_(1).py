# -*- coding: utf-8 -*-
"""House rent prediction model (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PiGqBDiOcftjRU7GBPBKWc2232C3tMTZ

The rent of a house depends on a lot of factors. With appropriate data and Machine Learning techniques, many real estate platforms find the housing options according to the customer’s budget. So, if you want to learn how to use Machine Learning to predict the rent of a house, this article is for you. In this article, I will take you through the task of House Rent Prediction with Machine Learning using Python.
"""

from google.colab import drive
drive.mount('/content/drive')

"""### Content
Within this dataset, you will find a comprehensive collection of data pertaining to nearly 4700+ available residential properties, encompassing houses, apartments, and flats offered for rent. This dataset is rich with various attributes, including the number of bedrooms (BHK), rental rates, property size, number of floors, area type, locality, city, furnishing status, tenant preferences, bathroom count, and contact information for the respective point of contact.

#### House Rent Prediction
The rent of a housing property depends on a lot of factors like:

 1.number of bedrooms, hall, and kitchen

 2.size of the property

 3.the floor of the house

 4.area type

 5.area locality

 6.City

 7.furnishing status of the house

To build a house rent prediction system, we need data based on the factors affecting the rent of a housing property. I found a dataset from Kaggle which includes all the features we need.

**Import necessary libraries of python**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

data = pd.read_csv("/content/drive/MyDrive/Revise/House_rent_prediction/House_Rent_Dataset.csv")

data.head()

data.tail()

data.info()

"""**all the data types are in correct way**

Let's check data set contain any null valur or not
"""

data.isnull().sum()

"""data set does not contain any null value

### Lets check the statastics term of data set
"""

data.describe()

# In the dataset we can analyse the skeewness by looking at mean and median values

# Lets check statastics values for rent

print(f"Mean Rent:{data.Rent.mean()}")
print(f"Median Rent:{data.Rent.median()}")
print(f"Highest Rent:{data.Rent.max()}")
print(f"Lowest Rent:{data.Rent.min()}")

# We can see the data is regth skiwed

plt.figure(figsize=(6,3))
plt.hist(data['Rent'], bins=22)
plt.title('Histogram of Rent Values')
plt.xlabel('Rent')
plt.ylabel('Frequency')
plt.show()

"""**Now let’s have a look at the rent of the houses in different cities according to the number of bedrooms, halls, and kitchens:**"""

figure = px.histogram(data, x=data["City"],
                y = data["Rent"],
                color = data["BHK"],
            title="Rent in Different Cities According to BHK")
figure.show()

# As we can see in Mumbai city flat rent is highest than other cities in India

"""**Now let’s have a look at the rent of the houses in different cities according to the area type:**"""

figure = px.histogram(data, x=data["City"],
                y = data["Rent"],
                color = data["Area Type"],
            title="Rent in Different Cities According to BHK")
figure.show()

"""**Now let’s have a look at the rent of the houses in different cities according to the furnishing status of the house:**"""

figure = px.histogram(data, x=data["City"],
                y = data["Rent"],
                color = data["Furnishing Status"],
            title="Rent in Different Cities According to BHK")
figure.show()

# As we can see furnish flat is having more rent than semi and unfurnished flat

"""**Now let’s have a look at the rent of the houses in different cities according to the size of the house:**"""

figure = px.histogram(data, x=data["City"],
                y = data["Rent"],
                color = data["Size"],
            title="Rent in Different Cities According to BHK")
figure.show()

# From above plot it is bit diffucult to check the relation

"""### Now let’s have a look at the number of houses available for rent in different cities according to the dataset:**"""

cities = data["City"].value_counts()

print(cities)

label = cities.index
counts = cities.values
color = ['gold','green']

fig = go.Figure(data=[go.Pie(labels=label,values=counts,hole=0.6)])
fig.update_layout(title_text='Number of Houses Available for Rent')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=color, line=dict(color='black', width=3)))
fig.show()

"""### Now let’s have a look at the number of houses available for different types of tenants:"""

data["Tenant Preferred"].value_counts()

# Preference of Tenant
tenant = data["Tenant Preferred"].value_counts()
label = tenant.index
counts = tenant.values
colors = ['gold','lightgreen']

fig = go.Figure(data=[go.Pie(labels=label, values=counts, hole=0.6)])
fig.update_layout(title_text='Preference of Tenant in India')
fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=30,
                  marker=dict(colors=colors, line=dict(color='black', width=3)))
fig.show()

# To build the model it is essential to convert all categorical feature in to numericl
# Because machine will understand only numerical variables

data.columns.tolist()

for i in data.columns:
    if data[i].dtypes==object:
        print (i)

# We will be using some important features to evaluate our model
#["Area Type", "City", "Furnishing Status", "Tenant Preferred"]

data.head(1)

data["Area Type"] = data["Area Type"].map({"Super Area": 1,
                                          "Carpet Area": 2,
                                          "Built Area": 3})
data["City"] = data["City"].map({"Mumbai": 4000, "Chennai": 6000,
                                 "Bangalore": 5600, "Hyderabad": 5000,
                                 "Delhi": 1100, "Kolkata": 7000})

data["Furnishing Status"] = data["Furnishing Status"].map({"Unfurnished": 0,
                                                           "Semi-Furnished": 1,
                                                           "Furnished": 2})
data["Tenant Preferred"] = data["Tenant Preferred"].map({"Bachelors/Family": 2,
                                                         "Bachelors": 1,
                                                         "Family": 3})
print(data.head())

data.head()

data.drop(["Posted On","Floor","Area Locality","Point of Contact"],axis=1)

# Now our dataset is read to build model

#Splitting the dataset
from sklearn.model_selection import train_test_split
X = np.array(data[["BHK","Size","Area Type","City","Furnishing Status","Tenant Preferred","Bathroom"]])
y = np.array(data[["Rent"]])

X_train, X_test, y_train, y_test =train_test_split(X, y, test_size = 0.1, random_state = 42)

"""### Now let’s train a house rent prediction model using an LSTM neural network model:"""

from keras.models import Sequential
from keras.layers import Dense, LSTM
model = Sequential()
model.add(LSTM(128, return_sequences= True,
              input_shape = (X_train.shape[1],1)))

model.add(LSTM(64, return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))
model.summary()

model.compile(optimizer = "adam", loss = "mean_squared_error")
model.fit(X_train,y_train, batch_size = 1, epochs = 20 )

"""## Now here’s how to predict the rent of a housing property using the trained model:`"""

print("Enter House Details to Predict Rent")
a = int(input("Number of BHK: "))
b = int(input("Size of the House: "))
c = int(input("Area Type (Super Area = 1, Carpet Area = 2, Built Area = 3): "))
d = int(input("Pin Code of the City: "))
e = int(input("Furnishing Status of the House (Unfurnished = 0, Semi-Furnished = 1, Furnished = 2): "))
f = int(input("Tenant Type (Bachelors = 1, Bachelors/Family = 2, Only Family = 3): "))
g = int(input("Number of bathrooms: "))
features = np.array([[a, b, c, d, e, f, g]])
print("Predicted House Price = ", model.predict(features))

"""# **By building the model we can check the price of flat rent in the given city by specifying our requirement related to flat**

# **Summary**
## **So this is how to use Machine Learning to predict the rent of a housing property. With appropriate data and Machine Learning techniques, many real estate platforms find the housing options according to the customer’s budget.**
"""



